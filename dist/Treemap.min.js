(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Treemap=f()}})(function(){var define,module,exports;return function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r}()({1:[function(require,module,exports){"use strict";var packageInfo=require("./package.json");function Treemap(){this.parent;this.data;this.value=0;this.items=[];this.x=0;this.y=0;this.w=0;this.h=0;this.options={};if(arguments.length>=4){this.x=arguments[0];this.y=arguments[1];this.w=arguments[2];this.h=arguments[3];this.options=arguments[4]||{}}else{this.parent=arguments[0];this.data=arguments[1];this.value=arguments[2]||0;if(typeof this.value=="object"){Object.keys(this.value).forEach(function(k){var v=parseFloat(this.value[k]);v=isNaN(v)?0:v;this.value[k]=v}.bind(this))}else{var v=parseFloat(this.value);v=isNaN(v)?0:v;this.value=v}}this.x=this.x||0;this.y=this.y||0;this.w=this.w||0;this.h=this.h||0;this.minValue=0;this.maxValue=0;this.level=0;if(this.parent)this.level=this.parent.level+1;this.depth=0;this.itemCount=1;this.index=0;this.root=this;this.isRoot=true;if(this.parent){this.root=this.parent.root;this.isRoot=false}this.options=this.options||this.root.options;this.ignored=false;Treemap.prototype.addData=function(data,opts){opts=opts||{};if(opts.data)this.data=data[opts.data];else this.data=data;if(typeof data==="number"){this.value=data}else{if(Array.isArray(opts.value)){if(typeof this.value!="object"){this.value={}}opts.value.forEach(function(k){this.value[k]=data[k]||0}.bind(this))}else{this.value=data[opts.value]||0}}var children=data;if(opts.children)children=data[opts.children];if(Array.isArray(children)){children.forEach(function(child){var t=new Treemap(this);this.items.push(t);t.addData(child,opts)}.bind(this));return true}return false};Treemap.prototype.addItem=function(data,keys,value){value=value||1;if(keys){var currItem=this;for(var j=0;j<keys.length;j++){var k=keys[j];var i=currItem.items.findIndex(function(el){return el.data==data[k]});if(i>=0){if(j==keys.length-1)currItem.items[i].add(value);currItem=currItem.items[i]}else{var newItem=new Treemap(currItem,data[k],value);currItem.items.push(newItem);currItem=newItem}}return currItem}else{var i=this.items.findIndex(function(el){return el.data==data});if(i>=0){this.items[i].add(value);return false}else{var newItem=new Treemap(this,data,value);this.items.push(newItem)}return newItem}};Treemap.prototype.setOptions=function(opts){Object.keys(opts).forEach(function(k){this.options[k]=opts[k]}.bind(this));this.items.forEach(function(el){el.setOptions(opts)})};Treemap.prototype.addTreemap=function(data,value){var t=new Treemap(this,data,value);this.items.push(t);return t};Treemap.prototype.add=function(val){if(typeof val==="object"){if(typeof this.value!="object"){this.value={}}Object.keys(val).forEach(function(k){var v=parseFloat(val[k]);v=isNaN(v)?0:v;if(this.value[k]){this.value[k]+=v}else{this.value[k]=v}}.bind(this))}else{var v=parseFloat(val);this.value+=isNaN(v)?0:v}};Treemap.prototype.sumUpValues=function(valueKey){if(Array.isArray(this.options.ignore)){if(this.options.ignore.indexOf(this.data)>=0){this.ignored=true}else{this.ignored=false}}if(this.items.length==0){if(this.ignored)return valueKey?{}:0}else{this.minValue=Number.MAX_VALUE;this.maxValue=0;this.depth=0;this.itemCount=1;this.value=valueKey?{}:0;if(this.ignored)return valueKey?{}:0;for(var i=0;i<this.items.length;i++){var sum=this.items[i].sumUpValues(valueKey);this.add(sum);var val=valueKey?sum[valueKey]:sum;this.minValue=Math.min(this.minValue,val);this.maxValue=Math.max(this.maxValue,val);this.depth=Math.max(this.depth,this.items[i].depth+1);this.itemCount+=this.items[i].itemCount}}return this.value};Treemap.prototype.calculate=function(valueKey){if(this.items.length==0)return;if(this==this.root){this.sumUpValues(valueKey)}if(this.ignored){this.x=-1e5;this.y=0;this.w=0;this.h=0;return}if(this.root.options.order=="sort"||this.root.options.order==undefined){this.items.sort(function(a,b){if(valueKey){if(a.value[valueKey]<b.value[valueKey])return 1;if(a.value[valueKey]>b.value[valueKey])return-1}else{if(a.value<b.value)return 1;if(a.value>b.value)return-1}return 0})}else if(this.root.options.order=="shuffle"){shuffleArray(this.items)}for(var i=0;i<this.items.length;i++){this.items[i].index=i}var restSum=valueKey?this.value[valueKey]:this.value;var pad=this.root.options.padding||0;var restX=this.x+pad;var restY=this.y+pad;var restW=this.w-pad*2;var restH=this.h-pad*2;if(this.root.options.order=="keep"){for(var i=0;i<this.items.length;i++){var a=restW;var b=restH;if(!this.items[i].isHorizontal){a=restH;b=restW}var rowSum=0;for(var j=i;j<this.items.length;j++){rowSum+=valueKey?this.items[j].value[valueKey]:this.items[j].value;if(this.items[j].wrap)break}var startI=i;var endI=j;var percentage=rowSum/restSum;var bLen=b*percentage;var aPos=restX;var bPos=restY;var aLen=restW;if(!this.items[i].isHorizontal){aPos=restY;bPos=restX;aLen=restH}for(var j=startI;j<=endI;j++){var val=valueKey?this.items[j].value[valueKey]:this.items[j].value;var aPart=aLen*val/rowSum;if(this.items[i].isHorizontal){this.items[j].x=aPos;this.items[j].y=bPos;this.items[j].w=aPart;this.items[j].h=bLen}else{this.items[j].x=bPos;this.items[j].y=aPos;this.items[j].w=bLen;this.items[j].h=aPart}this.items[j].w=Math.max(this.items[j].w,0);this.items[j].h=Math.max(this.items[j].h,0);this.items[j].calculate(valueKey);aPos+=aPart}if(this.items[i].isHorizontal){restY+=bLen;restH-=bLen}else{restX+=bLen;restW-=bLen}restSum-=rowSum;i=endI}}else{var actIndex=0;while(actIndex<this.items.length){var isHorizontal=true;var a=restW;var b=restH;if(this.root.options.direction!="horizontal"){if(restW>restH||this.root.options.direction=="vertical"){isHorizontal=false;a=restH;b=restW}}var rowSum=0;var rowCount=0;var avRelPrev=Number.MAX_VALUE;for(var i=actIndex;i<this.items.length;i++){rowSum+=valueKey?this.items[i].value[valueKey]:this.items[i].value;rowCount++;var percentage=rowSum/restSum;var bLen=b*percentage;var avRel=a/rowCount/bLen;this.items[i].isHorizontal=isHorizontal;if(avRel<1||i==this.items.length-1){if(avRelPrev<1/avRel){rowSum-=valueKey?this.items[i].value[valueKey]:this.items[i].value;rowCount--;bLen=b*rowSum/restSum;i--}this.items[i].wrap=true;var aPos=restX;var bPos=restY;var aLen=restW;if(!isHorizontal){aPos=restY;bPos=restX;aLen=restH}for(var j=actIndex;j<=i;j++){var val=valueKey?this.items[j].value[valueKey]:this.items[j].value;var aPart=aLen*val/rowSum;if(isHorizontal){this.items[j].x=aPos;this.items[j].y=bPos;this.items[j].w=aPart;this.items[j].h=bLen}else{this.items[j].x=bPos;this.items[j].y=aPos;this.items[j].w=bLen;this.items[j].h=aPart}this.items[j].w=Math.max(this.items[j].w,0);this.items[j].h=Math.max(this.items[j].h,0);this.items[j].calculate(valueKey);aPos+=aPart}if(isHorizontal){restY+=bLen;restH-=bLen}else{restX+=bLen;restW-=bLen}restSum-=rowSum;break}avRelPrev=avRel}actIndex=i+1}}};Treemap.prototype.draw=function(drawItemFunction){if(!drawItemFunction){console.warn("You have to supply a drawing function to see something.");return}if(!this.ignored){drawItemFunction(this);for(var i=0;i<this.items.length;i++){this.items[i].draw(drawItemFunction)}}}}function shuffleArray(array){for(var i=array.length-1;i>0;i--){var j=Math.floor(Math.random()*(i+1));var temp=array[i];array[i]=array[j];array[j]=temp}}if(!Array.isArray){Array.isArray=function(obj){return Object.prototype.toString.call(obj)=="[object Array]"}}module.exports=Treemap},{"./package.json":2}],2:[function(require,module,exports){module.exports={name:"Treemap.js",version:"0.4.0",description:"A javascript library for calculating a treemap.",license:"MIT",main:"index.js",scripts:{bundle:"browserify index.js --standalone Treemap -o dist/Treemap.js",devbundle:"npm run bundle && copyfiles -u 1 dist/Treemap.js examples/lib/",dist:"npm run bundle && browserify index.js --standalone Treemap | uglifyjs > dist/Treemap.min.js && copyfiles -u 1 dist/Treemap.js examples/lib/",documentation:"documentation readme index.js --section=Reference",onchange:"onchange 'index.js' -- npm run devbundle"},repository:{type:"git",url:"https://github.com/bohnacker/Treemap.js"},keywords:["dataviz","graph","treemap","recursive"],author:"Hartmut Bohnacker <mail@hartmut-bohnacker.de>",bugs:{url:"https://github.com/bohnacker/Treemap.js/issues"},homepage:"https://github.com/bohnacker/Treemap.js",devDependencies:{browserify:"^14.4.0",documentation:"^5.2.2","uglify-js":"^3.0.28",watch:"1.0.2",onchange:"6.0.0"}}},{}]},{},[1])(1)});
